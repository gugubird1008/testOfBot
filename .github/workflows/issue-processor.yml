name: Issue Processor

on:
  issues:
    types: [opened]

jobs:
  process-issue:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Add waitValid label
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['waitValid']
            })

      - name: Get issue body
        id: get_issue
        uses: actions/github-script@v7
        with:
          script: |
            const issue = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            })
            const body = issue.data.body
            const lines = body.split('\n')
            let address = ''
            for (const line of lines) {
              if (line.includes('On-chain address for first allocation:')) {
                address = line.split(':')[1].trim()
                break
              }
            }
            if (!address) {
              throw new Error('On-chain address not found in issue body')
            }
            core.setOutput('address', address)
            return body

      - name: Create application file
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs')
            const address = '${{ steps.get_issue.outputs.address }}'
            const issueBody = '${{ steps.get_issue.outputs.result }}'
            
            const applicationData = {
              "Version": "1.3",
              "ID": address,
              "Issue Number": context.issue.number.toString(),
              "Client": {},
              "Project": {},
              "Allocation Requests": []
            }
            
            const lines = issueBody.split('\n')
            let currentSection = ''
            
            for (const line of lines) {
              if (line.startsWith('### Client Information')) {
                currentSection = 'Client'
              } else if (line.startsWith('### Project Information')) {
                currentSection = 'Project'
              } else if (line.includes(':')) {
                const [key, value] = line.split(':').map(s => s.trim())
                if (currentSection === 'Client' || currentSection === 'Project') {
                  applicationData[currentSection][key] = value
                }
              }
            }
            
            const filePath = `applications/${address}.json`
            fs.writeFileSync(filePath, JSON.stringify(applicationData, null, 2))

      - name: Commit and push changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add applications/
          git commit -m "Add application file for ${{ steps.get_issue.outputs.address }}"
          git push

      - name: Comment on issue
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: 'Thank you for submitting your application! Our team will review it shortly.'
            })